package main

// Go语言的Goroutine之间是共享内存的
func main() {
	// Goroutine是Go语言特有的并发体，是一种轻量级的线程，由go关键字启动 携程
	// 有一个固定大小的栈 用来保存函数递归调用时参数和局部变量
	// 一是对于很多只需要很小的栈空间的线程来说是一个巨大的浪费，
	// 二是对于少数需要巨大栈空间的线程来说又面临栈溢出的风险

	// Goroutine会以一个很小的栈启动（可能是2KB或4KB），
	// 当遇到深度递归导致当前栈空间不足时，
	// Goroutine会根据需要动态地伸缩栈的大小（主流实现中栈的最大值可达到1GB）

	// 调度器

	// 同步 原子操作
	// sync.Mutex
	// sync/atomic

	// 初始化顺序

	// main.main函数执行之前所有代码都运行在同一个Goroutine中，
	// 也是运行在程序的主系统线程中。
	// 如果某个init函数内部用go关键字启动了新的Goroutine的话，
	// 新的Goroutine和main.main函数是并发执行的

	// 在无缓存的Channel上的每一次发送操作都有与其对应的接收操作相配对，
	// 发送和接收操作通常发生在不同的Goroutine上（在同一个Goroutine上执行2个操作很容易导致死锁）。

	// 对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前。
	// 对于带缓冲的Channel，对于Channel的第K个接收完成操作发生在第K+C个发送操作完成之前，其中C是Channel的缓存大小

	// 不要通过共享内存来通信，而应通过通信来共享内存

}

